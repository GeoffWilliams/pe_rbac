#!/usr/bin/env ruby
#
# Copyright 2016 Geoff Williams for Puppet Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

require 'pe_rbac'
require 'pe_rbac/action'
require 'pe_rbac/core'
require 'pe_rbac/role'
require 'pe_rbac/user'
require 'pe_rbac/version'
require 'escort'
require 'securerandom'

# display help if nothing specified
ARGV.push('-h') if ARGV.empty?

Escort::App.create do |app|
  app.version PeRbac::VERSION
  app.summary "pe_rbac"
  app.description "create RBAC users and install tokens"

  app.command :code_manager do |command|
    command.summary "Setup a code manager"
    command.description "Create a deploy user for use with code manager and install token"
    command.action do |options, arguments|
      role      = 'Code Deployers'
      cmd       = :code_manager # FIXME obtain this automatically
      description = options[:global][:commands][cmd][:options][:description]
      lifetime  = options[:global][:commands][cmd][:options][:lifetime]
      username  = options[:global][:commands][cmd][:options][:username]
      password  = options[:global][:commands][cmd][:options][:password]
      email     = options[:global][:commands][cmd][:options][:email]

      role_id = PeRbac::Role::get_role_id(role)
      role_data = PeRbac::Role::get_role(role_id)

      perms = [{
        "object_type" => "tokens",
        "action"      => "override_lifetime",
        "instance"    => "*",
      }]

      # only need to update the role since its built-in
      PeRbac::Role::update_role(
        role,
        nil,
        PeRbac::Core::merge_permissions(role_data['permissions'], perms)
      )

      PeRbac::User::ensure_user(username, email, username, password, role_id)
      PeRbac::Action::login(username, password, lifetime)
    end
    command.options do |opts|
      opts.opt(:username,
        'Username for deploy user',
        :long    => '--username',
        :default => 'deploy'
      )
      opts.opt(:password,
        'Initial password for deploy user (default is to randomly generate)',
        :long    => '--password',
        :default => SecureRandom.hex
      )
      opts.opt(:email,
        'Email address',
        :long    => '--email',
        :default => 'root@localhost'
      )
      opts.opt(:lifetime,
        'Token validity length',
        :long    => '--lifetime',
        :default => '10y'
      )
    end
  end

  app.command :puppetdb do |command|
    command.summary "Access to PuppetDB"
    command.description "Create a user and token to access PuppetDB"
    command.action do |options, arguments|
      role        = 'PuppetDB Readers'
      cmd         = :puppetdb # FIXME obtain this automatically
      description = options[:global][:commands][cmd][:options][:description]
      lifetime    = options[:global][:commands][cmd][:options][:lifetime]
      username    = options[:global][:commands][cmd][:options][:username]
      password    = options[:global][:commands][cmd][:options][:password]
      email       = options[:global][:commands][cmd][:options][:email]
      allow_write = options[:global][:commands][cmd][:options][:allow_write]
      perms       = [
        {
          "object_type" => "tokens",
          "action"      => "override_lifetime",
          "instance"    => "*",
        },
        {
          "object_type" => "nodes",
          "action"      => "view_data",
          "instance"    => "*",
        }
      ]
      if allow_write
        perms.push({
          "object_type" => "nodes",
          "action"      => "edit_data",
          "instance"    => "*",
        })
      end

      # create/update the role
      PeRbac::Role::ensure_role(
        role,
        description,
        perms
      )

      # get the ID of the newly created role
      role_id = PeRbac::Role::get_role_id(role)

      # join a user to the role
      PeRbac::User::ensure_user(username, email, username, password, role_id)

      # Generate and output the token
      token = PeRbac::Action::token(username, password, lifetime)
      Escort::Logger.output.puts token
    end
    command.options do |opts|
      opts.opt(:username,
        'Username for puppetdb user',
        :long     => '--username',
        :default  => 'puppetdb_read'
      )
      opts.opt(:password,
        'Initial password for deploy user',
        :long     => '--password',
        :default  => SecureRandom.hex,
      )
      opts.opt(:email,
        'Email address',
        :long     => '--email',
        :default  => 'root@localhost'
      )
      opts.opt(:lifetime,
        'Token validity length',
        :long     => '--lifetime',
        :default  => '10y'
      )
      opts.opt(:allow_write,
        'Allow WRITING to PuppetDB?',
        :long     => '--allow-write',
        :type     => :boolean,
        :default  => false
      )
      opts.opt(:description,
        'Custommise the role description',
        :long     => '--description',
        :default  => 'Token access to PuppetDB'
      )
    end
  end

  app.command :reset_password do |command|
    command.summary "Reset a logon password"
    command.description "Obtain a reset token and then reset a password"
    command.action do |options, arguments|
      # fixme - obtain automatically
      cmd         = :reset_password
      username    = options[:global][:commands][cmd][:options][:username]
      password    = options[:global][:commands][cmd][:options][:password]

      PeRbac::Action::reset_password(username, password)
    end
    command.options do |opts|
      opts.opt(:username,
        'Username to reset',
        :long     => '--username',
        :default  => 'admin'
      )
      opts.opt(:password,
        'Password to reset to',
        :long     => '--password',
        :default  => SecureRandom.hex,
      )
    end
  end

  app.command :show_permissions do |command|
    command.summary "Show available permissions"
    command.action do |options, arguments|
      PeRbac::Action::show_permissions()
    end
  end

end
